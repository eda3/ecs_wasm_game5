// src/component.rs

// === このファイルは何？ 🤔 ===
// このファイルはね、アタシたちが作ってる自作ECS (エンティティ・コンポーネント・システム) っていう仕組みの心臓部の一つ！❤️
// ECSっていうのは、ゲームの中のモノ（エンティティ）に、いろんな「データ部品」（コンポーネント）をくっつけたり外したりして、
// それをまとめて「処理」（システム）するっていう、イケてるゲームの作り方なんだ！✨
//
// このファイルには、その「データ部品」である **コンポーネントって一体何なのか？** っていうルールを決めるための、
// たった一つの特別なルール、`Component` トレイトだけが書いてあるよ！📜

// === 大事なこと！☝️ ===
// - ここには **`Component` トレイトのルール定義だけ** があるよ！具体的なコンポーネントの中身はないんだ。
// - ゲームで使う具体的なデータ部品 (例えば、キャラの位置を表す `Position` とか、カードの種類を表す `Card` とか) は、
//   ここじゃなくて `src/components/` っていうフォルダの中にある、それぞれのファイル (例: `src/components/position.rs`) を見てね！👀
//
// なんで分けてるの？ 🤔 それはね…
// - **関心の分離 (Separation of Concerns)** っていう考え方なんだ！✨
//   コアなルール (`Component` トレイト) と、具体的なデータ (`Position` 構造体とか) を別の場所に置くことで、
//   コードがスッキリして、どこに何があるか分かりやすくなるし、後で直したり追加したりするのも楽になるんだ！💖
//   これは関数型プログラミングでも大事な「データと振る舞いを分ける」って考え方にも通じるよ！👍
// - **再利用性 (Reusability)** もアップ！🚀 `Component` トレイトのルール自体は、このゲーム以外でも使えるかもしれないでしょ？

// === 標準ライブラリからのお助けマンたち！🦸 ===
// Rustの標準ライブラリから、便利な機能を使わせてもらうよ！
// `use` って書くと、「この機能使うね！」って宣言できるんだ。

// `Debug` トレイト: これがあると、デバッグ中に `{::?}` っていう魔法の呪文で変数の中身をコンソールに出力できるようになるんだ！🐞 `println!("{:?}", my_component);` みたいに使えるよ！
use std::fmt::Debug;
// `Any` トレイト: これ、ちょっと難しいんだけど、実行時に「これって本当は何の型だっけ？」って情報を扱えるようにしてくれるすごいヤツ！🧙‍♀️
// アタシたちの `World` (ECSの全体を管理する場所) は、いろんな種類のコンポーネントをごちゃ混ぜにして持っておきたいから、
// `Any` を使って型を一時的に隠したり、後で元に戻したりするんだ。`TypeId` っていう型IDと一緒に使うことが多いよ！
use std::any::Any;

/// Component (コンポーネント) トレイト ✨ データ部品の証！ ✨
///
/// これがこのファイルの主役！🎉
///
/// **Q. これって何なの？** 🤔
/// A. これはね、ゲームの中の「データ」を表す構造体 (struct) が「アタシ、コンポーネントだよ！」って名乗るために実装する **マーカートレイト** なんだ！🏷️
///    マーカーっていうのは、目印みたいなもの。このトレイト自体には、具体的な機能 (メソッドとか) を持たせる必要は **ない** の！(空っぽでOK！)
///    `struct Position { x: f32, y: f32 }` みたいなデータ構造を作ったら、
///    `impl Component for Position {}` って一行書くだけで、「Position はコンポーネントだよ！」って宣言できるんだ！簡単でしょ？😉
///
/// **Q. なんでこれが必要なの？** 🤔
/// A. ECSの `World` (ゲーム世界の管理人さんみたいなもの！) が、いろんな種類のコンポーネント (`Position`, `Card`, `Velocity`...) を
///    区別なく、同じように扱えるようにするためなんだ！🤝
///    `World` の `add_component` みたいな関数では、ジェネリクスっていう `<T: Component>` みたいな書き方を使って、
///    「`Component` トレイトを実装してる型 (つまりコンポーネント宣言してる型) なら、どんなやつでも受け入れるよ！」っていう
///    ルールを作ってるんだ。このトレイトがないと、`World` はどれがコンポーネントなのか分からなくなっちゃう！🤯
///
/// **Q. トレイト名の後ろにある `: Debug + Any + Send + Sync + 'static` って何？呪文？** 🧙‍♀️
/// A. これは **トレイト境界 (Trait Bounds)** って言って、「`Component` を名乗るなら、これらの条件も満たしてね！」っていう追加ルールなんだ！✅
///    一つずつ見てみよっか！👀
///    - `: Debug`: さっきも出てきたね！デバッグプリント (`{:?}`) ができるようにするため。問題解決の強い味方！💪
///    - `: Any`: これもさっき説明したやつ！`World` が内部でいろんな型のコンポーネントを統一的に管理するために必要不可欠なんだ！🪄
///    - `: Send + Sync`: これはちょっと高度な話！🚀 Rustはマルチスレッド (複数の作業を同時に進めること) が得意なんだけど、
///                  これを安全に行うための目印なんだ。`Send` は「他のスレッドにデータを送っても安全だよ！」って意味で、
///                  `Sync` は「複数のスレッドから同時にデータにアクセスしても安全だよ！」って意味。
///                  WASM (ブラウザで動くRust) は基本シングルスレッドだけど、将来的にマルチスレッド対応したり、
///                  他のライブラリが要求してきたりする可能性もあるから、付けとくのがイケてるRustacean (Rust使い) の作法なんだ！😎
///    - `: 'static`: これはライフタイムっていう、データがどれくらいの間有効かを示す情報の一つ。`'static` は「プログラムが動いてる間、ずっと有効だよ！」
///                 って意味で、参照 (データを直接持たずに場所だけ指してるやつ) を含まない型であることを示すんだ。
///                 ジェネリクスとか `Any` トレイトを使うときに、この `Component` 型自体が変なタイミングで消えたりしないことを保証するために、よく必要になるよ！🕰️
///
/// **まとめ！** 📝
/// ゲームで使う「データ部品」 (構造体) を作ったら、忘れずに `impl Component for YourStruct {}` って書いて、
/// この `Component` トレイトを実装 (マーキング) してあげてね！💖 そしたら `World` がちゃんと仲間として認識してくれるよ！🤝
pub trait Component: Debug + Any + Send + Sync + 'static {
    // 今は空っぽ！ ✨ メソッドはここには書かないよ！
    // なぜなら、Component はあくまで「データの種類」を示すマーカーだからね！🏷️
    // データの具体的な「値」は各コンポーネント構造体 (struct) が持つし、
    // そのデータを「どう使うか」っていう「振る舞い」は System が担当するのがECSの基本スタイル！⚙️
    // こうやってデータと振る舞いを分けるのが、コードを整理しやすくするコツなんだ！(関数型っぽい考え方！😉)

    // もし、将来的に「全てのコンポーネントに共通で持たせたいメソッド」
    // (例えば、初期状態にリセットする `reset()` メソッドとか) が出てきたら、
    // その時はここに定義を追加することも **できる** よ！ (でも、普通はあまりやらないかな？🤔)
    // 例: fn reset(&mut self);
}

// === 過去の遺物たち 👻 (今はもうここにはいないよ！) ===
// 以前はこのファイルに ComponentStorage (コンポーネントをまとめて管理する仕組み) や、
// Position, Card みたいな具体的なコンポーネントの定義も書かれてた時期があったんだけど…
//
// コードをもっと分かりやすく、役割ごとに整理するために、以下の場所に移動したり、役割を終えたりしたよ！👋
//
// - `ComponentStorage`: `World` の中で、もっと効率的な方法 (HashMap と Box<dyn Any>) でコンポーネントを管理するようにしたから、専用の型は必要なくなったんだ！🎉 (進化！)
// - 具体的なコンポーネント (`Position`, `Card`, `Suit`, `Rank`, `StackType`, `StackInfo`, `Player`, `DraggingInfo`, `GameState` など): これらは全部 `src/components/` フォルダの中に、それぞれのファイルとして引っ越したよ！🚚 見てみてね！👀
// - WASM公開用の Enum (`Suit`, `Rank`, `StackType`, `GameState` などで `#[wasm_bindgen]` が付いてるやつ): これらはコンポーネント定義と一緒に `src/components/` にあるか、あるいは通信プロトコルで使うものは `src/protocol.rs`、WASMのAPIとして公開するものは `src/lib.rs` や `src/app/` 以下など、もっと適切な場所に置かれるべきだね！場所を確認してみてね！🤔 (これは現状の確認メモ！)

// これで `src/component.rs` は Component トレイトの定義だけに集中できてスッキリ！✨ 