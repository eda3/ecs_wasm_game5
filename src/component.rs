// src/component.rs

// === このファイルについて ===
// このファイルは、自作 ECS (エンティティ・コンポーネント・システム) の中で
// 「コンポーネントとは何か？」を定義するための、ただ一つのトレイト、
// `Component` トレイトを定義しています。
//
// **重要:**
// - ここには `Component` トレイトの定義 **だけ** があります。
// - ゲームで使う具体的なコンポーネント (例: 位置を表す `Position`、
//   カード情報を表す `Card` など) は、このファイルには **ありません**。
// - 具体的なコンポーネントの定義は、`src/components/` ディレクトリの中にある
//   それぞれのファイル (例: `src/components/position.rs`) を見てください。
//
// なぜ分けるの？ 🤔
// - 関心の分離: コアな概念 (トレイト) と具体的なデータ (構造体) を分けることで、
//   コードの見通しが良くなり、管理しやすくなります。
// - 再利用性: `Component` トレイト自体は、他のプロジェクトでも使えるかもしれません。

// === 標準ライブラリからのインポート ===
// Debug トレイト: デバッグ時に `{::?}` フォーマットで値を出力できるようにするために必要です。
use std::fmt::Debug;
// Any トレイト: 実行時に型情報を扱うために必要です。World でコンポーネントストレージを
//             管理する際に `TypeId` と共に使われます。
use std::any::Any;

/// Component (コンポーネント) トレイト。
///
/// これは何？
/// - ゲーム内の「データ」を表す構造体が実装すべき **マーカートレイト** です。
/// - マーカーとは、特定の機能を持つことを示す目印のようなもので、このトレイト自体に
///   具体的なメソッド（関数）は必須ではありません（空っぽでもOK！）。
/// - `struct Position { ... }` や `struct Velocity { ... }` のようなデータ構造に
///   `impl Component for Position {}` のように実装することで、「これはコンポーネントだよ！」
///   とコンパイラや他の開発者に伝えることができます。
///
/// なぜ必要？
/// - ECS の `World` が、様々な種類のコンポーネントを統一的に扱えるようにするためです。
/// - ジェネリクス (例: `World::add_component<T: Component>(...)`) を使って、
///   「`Component` トレイトを実装している型なら何でも受け付けますよ」という制約をかけるのに使います。
///
/// トレイト境界 (`: Debug + Any + Send + Sync + 'static`)
/// - `: Debug`: デバッグ出力 (`println!("{:?}", component);`) ができるようにします。
/// - `: Any`: 実行時に型情報を取得したり、具体的な型にダウンキャストしたりするために必要です。
///            `World` が内部で `Box<dyn Any>` を使って型情報を隠蔽しつつストレージを
///            管理しているため、このトレイト境界が必須になります。
/// - `: Send + Sync`: このコンポーネントがスレッド間で安全に送信 (`Send`) されたり、
///                  複数のスレッドから安全に共有 (`Sync`) されたりできることを示します。
///                  WASM は基本シングルスレッドですが、将来的な拡張やライブラリの要件を
///                  考慮して付けておくのが一般的です。
/// - `: 'static`: このコンポーネント型がプログラムの実行期間中ずっと有効な型であり、
///              参照（ライフタイム）を含まないことを示します。
///              ジェネリクスや `Any` トレイトを使う際によく要求されます。
///
/// まとめると、ゲームで使う「データ部品」は、この `Component` トレイトを実装してね！ということです。
pub trait Component: Debug + Any + Send + Sync + 'static {
    // 今は空っぽ！
    // もし全てのコンポーネントに共通で持たせたい振る舞い (メソッド)
    // (例えば、初期状態にリセットする `reset()` メソッドとか) が出てきたら、
    // ここに追加することができます。
    // fn reset(&mut self);
}

// 以前ここにあった ComponentStorage や具体的なコンポーネント (Position, Card, Suit, Rank, StackType, StackInfo, Player, DraggingInfo, GameState) の定義は、
// 関心の分離のため、それぞれの責務を持つファイルに移動または削除されました。
// - ComponentStorage: World の実装で直接 HashMap<Entity, T> を Box<dyn Any> で管理する方式になったため、不要になりました。
// - 具体的なコンポーネント: src/components/ 以下に移動しました。
// - Wasm 公開用 Enum (Suit, Rank, StackType, GameState): src/lib.rs や src/protocol.rs など、より適切な場所への移動を検討してください。 